// import array list
import java.util.ArrayList;
import java.util.Arrays;

// import buffer to read files
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader; 

import java.io.IOException;
import java.nio.Buffer;

// import write files
import java.util.Scanner;
import java.io.FileWriter;   // Import the FileWriter class


public class GaussianAlgorithm {
    
    public static void main(String[] args) throws IOException {
        
        if(args.length <= 1 || args.length > 3){
        //  there must be two or three arguments:
        //  gaussian sys1.lin or gaussian --spp sys1.lin
            System.out.println("Enter the command line in this form:" +
            " gaussian sys1.lin or gaussian --spp sys1.lin");
            System.out.println("hello?");
            System.exit(0);
        }
            
        else if(args[0].equals("gaussian") && args[1].equals("sys1.lin")){
           
            File file = new File(args[1]);
            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
        
            int n;
            String string;
            ArrayList<String> arrayList = new ArrayList<>();
            
            while ((string = bufferedReader.readLine()) != null) {
                arrayList.add(string); // add each line to array list
            }
    
            Scanner scanner = new Scanner(System.in);
            n = Integer.parseInt(arrayList.get(0));
            // let n be the first number given in the text file
    
            double[][] coeff = new double[n][n];
            // initialize array coeff for further Algorithm
            
            int k = 1;
            
            for (int i = 0; i < n; i++) {
                String[] temp = arrayList.get(k++).split(" ");
                // get each numbers in the row
                
                for (int j = 0; j < n; j++) {
                    coeff[i][j] = Double.parseDouble(temp[j]);
                    // convert string to double
                }
            }
    
            double[] constVector = new double[n];
            // initialize vector 
            
            String[] temp = arrayList.get(k).split(" ");
            for (int i = 0; i < n; i++) {
                constVector[i] = Double.parseDouble(temp[i]);
            }
    
            NaiveGaussian(coeff, constVector);
        }
            
        else if(args[0].equals("gaussian") && args[1].equals("--spp") && args[2].equals("sys1.lin")){   
            File file = new File(args[2]);
            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            int n;
            String string;
            ArrayList<String> arrayList = new ArrayList<>();
            while ((string = bufferedReader.readLine()) != null) {
                arrayList.add(string);
            }
    
            Scanner scanner = new Scanner(System.in);
            n = Integer.parseInt(arrayList.get(0));
    
            double[][] coeff = new double[n][n];
            int k = 1;
            for (int i = 0; i < n; i++) {
                String[] temp = arrayList.get(k++).split(" ");
                for (int j = 0; j < n; j++) {
                    coeff[i][j] = Double.parseDouble(temp[j]);
                }
            }
    
            double[] constVector = new double[n];
            String[] temp = arrayList.get(k).split(" ");
            for (int i = 0; i < n; i++) {
                constVector[i] = Double.parseDouble(temp[i]);
            }
    
            SPPGaussian(coeff, constVector);
    }
            
        else{
            System.out.println("Enter the command line in this form:" +
            " gaussian sys1.lin or gaussian --spp sys1.lin");
             System.out.println("huh?");
            System.exit(0);
        }
            

    }
    
    // Naive Gaussian Algorithm
    public static void NaiveGaussian(double[][] coeff, double[] constVector) {
        
        double[] sol = new double[coeff.length];
        FwdElimination(coeff, constVector);
        BackSubst(coeff, constVector, sol);
        
        try{
            // write the solution in the file sys1.sol
            FileWriter myWriter = new FileWriter("sys1.sol");
            myWriter.write(Arrays.toString(sol));
            myWriter.close();
        } catch (IOException e) {
          System.out.println("An error occurred.");
          e.printStackTrace();
        }
     
        
    }
    
    // Forward Elimination
    public static void FwdElimination(double[][] coeff, double[] constVector) {
        int n = coeff.length;
        for (int k = 0; k < n; k++) {
            for (int i = k + 1; i < n; i++) {
                double mult = coeff[i][k] / coeff[k][k];
                for (int j = k + 1; j < n; j++) {
                    coeff[i][j] = coeff[i][j] - mult * coeff[k][j];
                }
                constVector[i] = constVector[i] - mult * constVector[k];
            }
        }
    }

    public static void BackSubst(double[][] coeff, double[] constVector, double[] sol) {
        int n = coeff.length;
        for (int i = n - 1; i >= 0; i--) {
            double sum = constVector[i];
            for (int j = i + 1; j < n; j++) {
                sum = sum - coeff[i][j] * sol[j];
            }
            sol[i] = sum / coeff[i][i];
        }
    }
    
    // SPP Gaussian Algorithm
    public static void SPPGaussian(double[][] coeff, double[] constVector) {
        int n = coeff.length;
        double[] sol = new double[n];
        int[] ind = new int[n];
        for (int i = 0; i < n; i++) {
            ind[i] = i;
        }
        
        SPPFwdElimination(coeff, constVector, ind);
        SPPBackSubst(coeff, constVector, sol, ind);
        
        try{
            // write the solution in the file sys1.sol
            FileWriter myWriter = new FileWriter("sys1.sol");
            myWriter.write(Arrays.toString(sol));
            myWriter.close();
        } catch (IOException e) {
          System.out.println("An error occurred.");
          e.printStackTrace();
        }
        
    }
    
    // Forward Elimination
    public static void SPPFwdElimination(double[][] coeff, double[] constVector, int[] ind) {
        int n = coeff.length;
        double[] scaling = new double[n];

        for (int i = 0; i < n; i++) {
            double smax = 0;
            for (int j = 0; j < n; j++) {
                smax = Math.max(smax, coeff[i][j]);
            }
            scaling[i] = smax;
        }
        for (int k = 0; k < n; k++) {
            double rmax = 0;
            int maxInd = k;

            for (int i = k; i < n; i++) {
                double r = coeff[ind[i]][k] / scaling[ind[i]];
                // ratio of coefficient to scaling factor
                if (r > rmax) {
                    rmax = r;
                    maxInd = i;
                }
            }
            swap(ind, maxInd, k);

            for (int i = k + 1; i < n; i++) {
                double mult = coeff[ind[i]][k] / coeff[ind[k]][k];
                for (int j = k + 1; j < n; j++) {
                    coeff[ind[i]][j] = coeff[ind[i]][j] - mult * coeff[ind[k]][j];
                }
                constVector[ind[i]] = constVector[ind[i]] - mult * constVector[ind[k]];
            }
        }
    }

    public static void SPPBackSubst(double[][] coeff, double[] constVector, double[] sol, int[] ind) {
        int n = coeff.length;
        for (int i = n - 1; i >= 0; i--) {
            double sum = constVector[ind[i]];
            for (int j = i + 1; j < n; j++) {
                sum = sum - coeff[ind[i]][j] * sol[j];
            }
            sol[i] = sum / coeff[ind[i]][i];
        }
    }

    public static void swap(int[] ind, int i, int j) {
        int temp = ind[i];
        ind[i] = ind[j];
        ind[j] = temp;
    }
    
    

}